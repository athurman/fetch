#!/usr/bin/env ruby

require_relative 'lib/environment'
require_relative 'lib/parse_arguments'
require_relative 'lib/interactions'

class FetchDog
  include Interactions
  attr_reader :options

  def initialize
    @options = ParseArguments.parse
    Environment.environment = @options[:environment] || "production"
    @options.delete(:environment)
  end

  def main
    Environment.connect_to_database
    command = options.delete(:command)
    if command.nil?
      print_logo()
      find_dog_breeds_and_return_shelter_dogs()
    elsif command == "add"
      add_shelter_dog_to_db()
    elsif command == "list"
      print_logo()
      list_shelterdogs()
    elsif command == "update"
      searched_dog = Shelterdog.find_by(name: options[:name])
      update_shelter_dog_info_for(searched_dog)
    elsif command == "delete"
      dog_id = ask("Please type the id of the dog named #{options[:name]} that you would like to delete")
      dog = Shelterdog.find_by(id: dog_id)
      dog.destroy
      tell("Dog #{dog_id}. #{options[:name]} has beend deleted from the shelterdogs table")
    end
  end

  def add_shelter_dog_to_db()
    error_messages = ParseArguments.validate(options)
    if error_messages.empty?
      shelterdog = Shelterdog.create(options)
      shelterdog.save
      tell("A shelter dog named #{options[:name]}, breed: #{options[:breed]}, shelter: #{options[:shelter]}, age: #{options[:age]} weight: #{options[:weight]} lbs. with status of #{options[:status]}.")
    else
      tell(error_messages)
    end
  end

  def list_shelterdogs()
    puts "All Shelter Dogs:"
    puts Shelterdog.all
  end

  def check_results results
    if results == [] || results == "No results found"
      puts "Sorry, we were unable to fulfill your request.  Please try again"
      exit
    end
  end

  def print_dogs(dog_array, breed_name= "dog")
    if dog_array[0].is_a?(Breed)
      puts "Here are the top 10 dog breeds that fit your lifestyle:"
    elsif dog_array[0].is_a?(Shelterdog)
      puts
      puts "Here are #{breed_name}s in the surrounding area:"
    end
    dog_array.each do |dog|
      puts dog
      puts
    end
  end

  def find_dog_breeds_and_return_shelter_dogs
    roles = Role.all
      check_results(roles)
      role = give_options("Please select the number of the role you would like for your dog to be.", roles)
      check_results(roles)
      exercises = Breed.return_exercise(role.id)
      check_results(exercises)
      exercises.delete_at(3) if exercises.length == 4
      exercise = give_options("How often do you exercise?", exercises)
      grooming = give_options("Are you willing to groom your dog frequently (at least once a week)?", ["yes", "no"])
      family_friendly = give_options("Does your dog have to be good around children?", ["yes", "no"])
      breeds = Breed.find_top_five(role.id, exercise, grooming, family_friendly)
      check_results(breeds)
      print_dogs(breeds)
      search = give_options("Would you like to search for one of these breeds in local shelters?", ["yes", "no"])
      if search == "yes"
        shelter_breed = give_options("Please type in the number of the breed you would like to search:", breeds)
      else
        tell("Thanks!")
        exit
      end
      shelterdogs = Shelterdog.where(breed: shelter_breed.name)
      check_results(shelterdogs)
      print_dogs(shelterdogs, shelter_breed.name)
  end

  def update_shelter_dog_info_for searched_dog
    id = ask("Please select the id of the dog you would like to update.")
    shelterdog = Shelterdog.find_by(id: id)
    if shelterdog.nil?
      tell("No dogs were found with that id, please try again.")
    else
      tell(shelterdog)
      selection = ask("Please select the piece of information you would like to update (age, status, etc.).")
      updated_info = ask("What would you like to change the dog's #{selection} to?")
      if selection == 'name'
        shelterdog.update(name: updated_info)
      elsif selection == 'breed'
        shelterdog.update(breed: updated_info)
      elsif selection == 'shelter'
        shelterdog.update(shelter: updated_info)
      elsif selection == 'age'
        shelterdog.update(age: updated_info)
      elsif selection == 'weight'
        shelterdog.update(weight: updated_info)
      elsif selection == 'status'
        shelterdog.update(status: updated_info)
      else
        puts "That is not an option, please try again"
        exit
      end
      tell("Dog #{shelterdog.id} is now named #{shelterdog.name}, breed is #{shelterdog.breed}, shelter is #{shelterdog.shelter}, age is #{shelterdog.age}, weight is #{shelterdog.weight}, and status is #{shelterdog.status}")
    end
  end

  def print_logo
    title = <<EOS
       ,
       |`-.__     ad88                                 88
       / ' _/    d8"                 ,d                88
      ****`      88                  88                88
     /    }    MM88MMM  ,adPPYba,  MM88MMM  ,adPPYba,  88,dPPYba,
    /  \\ /       88    a8P_____88    88    a8"     ""  88P'    "8a
\\ /`   \\\\\\       88    8PP"""""""    88    8b          88       88
 `\\    /_\\\\      88    "8b,   ,aa    88,   "8a,   ,aa  88       88
  `~~~~~``~`     88     `"Ybbd8"'    "Y888  `"Ybbd8"'  88       88

                                 -- GO FOR IT --

EOS
  puts 'clear'
  puts title
  end
end

fetchdog = FetchDog.new()
fetchdog.main()
