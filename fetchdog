#!/usr/bin/env ruby

require_relative 'lib/environment'
require_relative 'lib/parse_arguments'
require_relative 'lib/interactions'

class FetchDog
  include Interactions
  attr_reader :options

  def initialize
    @options = ParseArguments.parse
    Environment.environment = @options[:environment] || "production"
  end

  def main
    database = Environment.database_connection
    if options[:command] == "add"
      add_shelter_dog_to_db()
    elsif options[:command] == "list"
      list_purchases()
    elsif options[:command] == "update"
      searched_dog = ShelterDog.search_by_name(options[:name])
      update_shelter_dog_info_for(searched_dog)
    elsif options[:command] == "delete"
      dog_id = ask("Please type the id of the dog named #{options[:name]} that you would like to delete")
      ShelterDog.delete(dog_id)
      tell("Dog #{dog_id}. #{options[:name]} has beend deleted from the shelterdogs table")
    else
      tell("Command not implemented")
    end
  end

  def add_shelter_dog_to_db()
    error_messages = ParseArguments.validate(options)
    if error_messages.empty?
      shelterdog = ShelterDog.new(options)
      shelterdog.save
      tell("A shelter dog named #{options[:name]}, breed: #{options[:breed]}, shelter: #{options[:shelter]}, age: #{options[:age]} weight: #{options[:weight]} lbs. with status of #{options[:status]}.")
    else
      tell(error_messages)
    end
  end

  def list_purchases()
    puts "All Shelter Dogs:"
    puts ShelterDog.all
  end

  def update_shelter_dog_info_for searched_dog
    unless searched_dog == "The dog you were searching for is not found"
      id = ask("Please select the id of the dog you would like to update.")
      shelterdog = ShelterDog.search_by_id(id)
      if shelterdog.nil?
        tell("No dogs were found with that id, please try again.")
      else
        tell(shelterdog)
        selection = ask("Please select the piece of information you would like to update (age, status, etc.).")
        updated_info = ask("What would you like to change the dog's #{selection} to?")
        shelterdog = shelterdog.update(selection, updated_info, id)
        tell("Dog #{shelterdog.id} is now named #{shelterdog.name}, breed is #{shelterdog.breed}, shelter is #{shelterdog.shelter}, age is #{shelterdog.age}, weight is #{shelterdog.weight}, and status is #{shelterdog.status}")
      end
    else
      tell(searched_dog)
    end
  end
end

fetchdog = FetchDog.new()
fetchdog.main()
